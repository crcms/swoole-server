<?php

namespace CrCms\Server\Tests;

use CrCms\Server\WebSocket\Channel;
use CrCms\Server\WebSocket\IO;
use CrCms\Server\WebSocket\Rooms\RedisRoom;
use CrCms\Server\WebSocket\Socket;
use Illuminate\Redis\Connections\PredisConnection;
use Illuminate\Redis\Connectors\PredisConnector;
use PHPUnit\Framework\TestCase;

/**
 * Class SocketTest.
 */
class SocketTest extends TestCase
{
    /**
     * @var Socket
     */
    protected static $socket;

    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        $app = \Mockery::mock('Illuminate\Contracts\Container\Container');

        $redisRoom = new RedisRoom((new PredisConnection(
            (new PredisConnector())->connect([
                'host'     => 'redis',
                'password' => null,
                'port'     => 6379,
                'database' => 10,
            ], [])
        )));

        $channel = new Channel(
            new IO($app, $redisRoom), '/'
        );
        $room = $channel->getIo()->getRoom();
        $room->reset();
        static::$socket = new Socket($app, $channel);
        static::$socket->setData(['x'=>1])->setFd(1);
    }

    public function testJoin()
    {
        static::$socket->join(['x1', 'x2', 'x3']);

        $result = static::$socket->getChannel()->to(['x1', 'x2', 'x3'])->getTo();

        $this->assertEquals(1, count($result));
        foreach ($result as $value) {
            $this->assertEquals(true, in_array($value, [1]));
        }
    }

    /**
     * @depends testJoin
     */
    public function testLeave()
    {
        $channel = static::$socket->getChannel();
        $channel->reset();
        $result = $channel->to(['x1'])->getTo();
        $this->assertEquals(1, count($result));

        static::$socket->leave(['x1']);

        $channel->reset();
        $result = $channel->to(['x1'])->getTo();
        $this->assertEquals(0, count($result));
        $channel->reset();
        $result = $channel->to(['x2', 'x3'])->getTo();

        $this->assertEquals(1, count($result));
        $channel->reset();
        static::$socket->leave();
        $result = $channel->to(['x1', 'x2', 'x3'])->getTo();

        $this->assertEquals(0, count($result));
    }

    public static function tearDownAfterClass()
    {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
        static::$socket = null;
    }
}
