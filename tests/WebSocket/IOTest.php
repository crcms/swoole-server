<?php

namespace CrCms\Server\Tests\WebSocket;

use CrCms\Server\WebSocket\AbstractChannel;
use CrCms\Server\WebSocket\IO;
use CrCms\Server\WebSocket\Rooms\ArrayRoom;
use PHPUnit\Framework\TestCase;

/**
 * Class IOListenerTest.
 */
class IOTest extends TestCase
{

    /**
     * @var IO
     */
    public static $io;

    public function setUp()
    {
        // TODO: Change the autogenerated stub
        parent::setUp();

        static::$io = new IO(new ArrayRoom());
    }

    public function testAddChannel()
    {
        $channel = \Mockery::mock(AbstractChannel::class);
        $channel->shouldReceive('getName')->andReturn('abc');

        static::$io->addChannel($channel);
        static::$io->addChannel($channel);

        $this->assertEquals(1, count(static::$io->getChannels()));
    }

    /**
     * testSetChannel
     *
     * @return void
     */
    public function testSetChannel()
    {
        $channel = \Mockery::mock(AbstractChannel::class);
        $channel->shouldReceive('getName')->andReturn('abc');

        static::$io->setChannel($channel);

        $channel1 = \Mockery::mock(AbstractChannel::class);
        $channel1->shouldReceive('getName')->andReturn('abc');

        static::$io->setChannel($channel1);

        $this->assertEquals(spl_object_hash($channel1), spl_object_hash(static::$io->getChannel('abc')));
    }

    public function testFdChannel()
    {
//        getFdChannel
        $fd = 1;
        $channel1 = \Mockery::mock(AbstractChannel::class);
        $channel1->shouldReceive('getName')->andReturn('abc');
        $channel1->shouldReceive('channelPrefix')->andReturn('__');
        $channel1->shouldReceive('rooms')->with($fd)->andReturn(['__'.strval($fd)]);

        static::$io->setChannel($channel1);

        $channel = static::$io->getFdChannelOrFail($fd);

        $this->assertEquals(spl_object_hash($channel1), spl_object_hash($channel));
    }
}
