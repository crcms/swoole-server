<?php

namespace CrCms\Server\Tests\IOListenerTest;

use CrCms\Server\WebSocket\Channel;
use CrCms\Server\WebSocket\IO;
use CrCms\Server\WebSocket\Listeners\IOListener;
use CrCms\Server\WebSocket\Middleware\TestMiddleware;
use CrCms\Server\WebSocket\Parsers\DefaultParser;
use CrCms\Server\WebSocket\Rooms\RedisRoom;
use Illuminate\Contracts\Container\Container;
use Illuminate\Foundation\Application;
use Illuminate\Redis\Connections\PredisConnection;
use Illuminate\Redis\Connectors\PredisConnector;
use PHPUnit\Framework\TestCase;
use Swoole\Http\Request;
use Swoole\WebSocket\Frame;


/**
 * Class IOListenerTest
 * @package CrCms\Server\Tests\IOListenerTest
 */
class IOListenerTest extends TestCase
{
    /**
     * @var IOListener
     */
    protected static $listen;

    /**
     * @var IO
     */
    protected static $io;

    protected static $app;

    protected static $request;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        static::$app = \Mockery::mock('app', Container::class);
        static::$app->shouldReceive('make')->with('websocket.room')->andReturn(
            new RedisRoom(new PredisConnection(
                (new PredisConnector())->connect([
                    'host' => 'redis',
                    'password' => null,
                    'port' => 6379,
                    'database' => 10,
                ], [])
            ))
        );
        static::$app->shouldReceive('make')->with('websocket.parser')->andReturn(new DefaultParser());

        static::$app->shouldReceive('make')->with(TestMiddleware::class)->andReturn(
            new TestMiddleware()
        );


        static::$request = new Request();
        static::$request->fd = 1;

        static::$io = new IO(
            static::$app
        );

        //$this->app =
        static::$listen = new IOListener();
    }

    public function testConnection()
    {
        static::$listen->connection(static::$io, [
            'request' => static::$request,
            'app' => static::$app,
        ]);


        $channel = static::$io->getCurrentChannel();

        $this->assertInstanceOf(Channel::class, $channel);
    }

    public function testMessage()
    {
        require __DIR__ . '/function.php';

        static::$listen->connection(static::$io, [
            'request' => static::$request,
            'app' => static::$app,
        ]);

        $frame = new Frame();
        $frame->finish = true;
        $frame->data = json_encode(['data' => ['x' => 1, 'z' => '2'], 'event' => 'test']);

        static::$listen->message(static::$io, [
            'request' => static::$request,
            'app' => static::$app, 'frame' => $frame,
        ]);
    }

    public function tearDown()
    {
        \Mockery::close();
        static::$request = static::$listen = static::$app = static::$io = null;
    }
}