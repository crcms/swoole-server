<?php

namespace CrCms\Server\Tests\Laravel;

use CrCms\Server\Drivers\Laravel\Laravel;
use CrCms\Server\Drivers\Laravel\Resetters\ProviderResetter;
use Illuminate\Config\Repository;
use PHPUnit\Framework\TestCase;

class LaravelTest extends TestCase
{
    /**
     * @var Laravel
     */
    public static $laravel;

    public static function setUpBeforeClass()
    {
        // TODO: Change the autogenerated stub
        parent::setUpBeforeClass();
        $app = require 'bootstrap.php';
        static::$laravel = $app->make('server.laravel');
    }

    public function testResetters()
    {
        $restters = static::$laravel->getResetters();

        $resttersNames = array_map(function ($obj) {
            return get_class($obj);
        }, $restters);

        $this->assertEquals(true, in_array(ProviderResetter::class, $resttersNames));
    }

//    public function testPreload()
//    {
//        $app = static::$laravel->getApplication();
//
//        $app->singleton('test', function () {
//            return new \stdClass();
//        });
//
//        static::$laravel->getBaseContainer()->make('config')->set(['swoole.laravel.preload' => ['test']]);
//
//        $this->assertEquals(false, $app->resolved('test'));
//
//        static::$laravel->preload();
//
//        $this->assertEquals(true, $app->resolved('test'));
//    }

    public function testApp()
    {
        $container = static::$laravel->getBaseContainer();

        $app = static::$laravel->getApplication();

        static::$laravel->open();

        $this->assertEquals(spl_object_hash($app), spl_object_hash(static::$laravel->getApplication()));
        static::$laravel->close();

        $app2 = static::$laravel->getApplication();

        $this->assertNotEquals(spl_object_hash($app), spl_object_hash($app2));
    }

    /**
     * testAppConfig
     *
     * @return void
     */
    public function testAppConfig()
    {
        $baseConfig = spl_object_hash(static::$laravel->getBaseContainer()->make('config'));

        $app = static::$laravel->getApplication();

        static::$laravel->open();

        $testInstance = spl_object_hash($app->get('config'));

        static::$laravel->close();

        static::$laravel->open();
        $app2 = static::$laravel->getApplication();

        $test2Instance = spl_object_hash($app2->get('config'));
        static::$laravel->close();



        $this->assertNotEquals($testInstance, $test2Instance);
        $this->assertNotEquals($baseConfig, $test2Instance);
        $this->assertNotEquals($baseConfig, $testInstance);
    }

    public function testShareInstance()
    {
        static::$laravel->getBaseContainer()->singleton('testing',function(){
            return new \stdClass();
        });
        static::$laravel->getBaseContainer()->make('testing');

        $app = static::$laravel->getApplication();

        static::$laravel->open();

        $testInstance = spl_object_hash($app->get('testing'));

        static::$laravel->close();

        static::$laravel->open();
        $app2 = static::$laravel->getApplication();

        $test2Instance = spl_object_hash($app2->get('testing'));
        static::$laravel->close();

        $this->assertEquals($testInstance, $test2Instance);
    }
}