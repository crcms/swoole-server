<?php

namespace CrCms\Server\Tests\Laravel\Http;

use CrCms\Server\Drivers\Laravel\Http\Events\RequestEvent;
use CrCms\Server\Drivers\Laravel\Http\Events\WorkerStartEvent;
use CrCms\Server\Drivers\Laravel\Http\Server;
use CrCms\Server\Server\Events\ManagerStartEvent;
use CrCms\Server\Server\Events\StartEvent;
use CrCms\Server\Server\Events\TaskEvent;
use CrCms\Server\Tests\Laravel\ApplicationTrait;
use Illuminate\Contracts\Container\Container;
use PHPUnit\Framework\TestCase;

class ServerTest extends TestCase
{
    use ApplicationTrait;

    /**
     * @var Container
     */
    public static $laravel;

    public function setUp()
    {
        // TODO: Change the autogenerated stub
        parent::setUp();

        static::$laravel = clone static::$app;
    }

    public function testServerEvents()
    {
        $server = new Server(
            static::$app->make('config')->get('swoole'),
            static::$app->make('server.laravel')
        );

        $server = \Mockery::mock($server);
        $server->shouldReceive('start');


        $this->assertEquals(RequestEvent::class,$server->getEvents()['request']);
        $this->assertEquals(WorkerStartEvent::class,$server->getEvents()['worker_start']);
        $this->assertEquals(StartEvent::class,$server->getEvents()['start']);
        $this->assertEquals(ManagerStartEvent::class,$server->getEvents()['manager_start']);
        $this->assertEquals(TaskEvent::class,$server->getEvents()['task']);

        $this->assertEquals(5,count($server->getEvents()));
    }

    public function testServerCreate()
    {
        $server = new Server(
            static::$app->make('config')->get('swoole'),
            static::$app->make('server.laravel')
        );

        $server->newServer();

        $this->assertInstanceOf(\Swoole\Http\Server::class,$server->getServer());
    }

    public function tearDown()
    {
        // TODO: Change the autogenerated stub
        parent::tearDown();

        static::$laravel = null;
    }
}