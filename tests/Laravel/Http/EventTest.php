<?php

namespace CrCms\Server\Tests\Laravel\Http;

use CrCms\Server\Drivers\Laravel\Http\Events\RequestHandledEvent;
use CrCms\Server\Drivers\Laravel\Http\Events\Server\RequestEvent;
use CrCms\Server\Drivers\Laravel\Http\Server;
use CrCms\Server\Drivers\Laravel\Laravel;
use CrCms\Server\Server\AbstractServer;
use CrCms\Server\Tests\Laravel\ApplicationTrait;
use Illuminate\Contracts\Container\Container;
use Illuminate\Contracts\Http\Kernel;
use PHPUnit\Framework\TestCase;
use Swoole\Http\Request;
use Swoole\Http\Response;

class EventTest extends TestCase
{
    use ApplicationTrait;

    /**
     * @var AbstractServer|Server
     */
    protected $server;

    /**
     * @var Container
     */
    protected $eventApp;

    /**
     * @var Container
     */
    protected $injectApp;

    public function setUp()
    {
        // TODO: Change the autogenerated stub
        parent::setUp();

        /* @var Laravel $laravel */
        $laravel = static::$app->make('server.laravel');

        $laravel = $this->mockKernel($laravel);

        $this->registerEvents($laravel);

        //第一次初始化的时候application已经bind了Kernel的实例，需要删除本次的application，重新生成
        $laravel->close();

        $this->server = new Server(
            static::$app->make('config')->get('swoole'),
            $laravel
        );
    }

    protected function mockKernel(Laravel $laravel)
    {
            //base kernel
        $kernel = \Mockery::mock(Kernel::class);
        $kernel->shouldReceive('handle')->andReturn(new \Symfony\Component\HttpFoundation\Response());
        $kernel->shouldReceive('terminate');//->andReturn()
        //bind base kernel
        $laravel->getBaseContainer()->instance(Kernel::class,$kernel);


        return $laravel;
    }

    /**
     * 事件模拟，判断事件中的app与外层执行应用是否一致
     *
     * @param Laravel $laravel
     * @return void
     */
    protected function registerEvents(Laravel $laravel)
    {
        $container = $laravel->getBaseContainer();
        $container->make('events')->listen(RequestHandledEvent::class,function(RequestHandledEvent $event){
            $this->eventApp = $event->app;
            $this->injectApp = \Illuminate\Container\Container::getInstance();
        });
    }

    public function testRequestEvent()
    {
        //
        $swooleRequest = \Mockery::mock(Request::class);
        $swooleRequest->server = [
            'request_method' => 'OPTIONS'
        ];
        $swooleRequest->shouldReceive('rawContent')->andReturn('123');

        //
        $swooleResponse = \Mockery::mock(Response::class);//new Response();
        $swooleResponse->shouldReceive('status')->andReturn(200);
        $swooleResponse->shouldReceive('header')->andReturn(['content-type'=>'text/plain']);
        $swooleResponse->shouldReceive('end')->andReturn('end');

        // kernel的惟一性
        $this->assertEquals(
            spl_object_hash($this->server->getLaravel()->getApplication()->make(Kernel::class)),
            spl_object_hash($this->server->getLaravel()->getBaseContainer()->make(Kernel::class))
        );

        // execute
        $event = new RequestEvent($this->server,$swooleRequest,$swooleResponse);

        $app1 = $event->getServer()->getApplication();
        //handle
        $event->handle();

        //事件的应用和当前应用是否为同一个
        $this->assertEquals(spl_object_hash($app1),spl_object_hash($this->eventApp));
        $this->assertEquals(spl_object_hash($app1),spl_object_hash($this->injectApp));

        //$event->handle() 会$laravel->close()
        //所有会重新开启一个新的app
        $app2 = $event->getServer()->getApplication();
        $this->assertNotEquals(spl_object_hash($app1),spl_object_hash($app2));
    }
}