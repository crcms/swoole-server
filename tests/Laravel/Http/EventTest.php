<?php

namespace CrCms\Server\Tests\Laravel\Http;

use CrCms\Server\Drivers\Laravel\Http\Events\RequestEvent;
use CrCms\Server\Drivers\Laravel\Http\Server;
use CrCms\Server\Server\AbstractServer;
use CrCms\Server\Tests\Laravel\ApplicationTrait;
use Illuminate\Contracts\Container\Container;
use PHPUnit\Framework\TestCase;
use Swoole\Http\Request;
use Swoole\Http\Response;

class EventTest extends TestCase
{
    use ApplicationTrait;

    /**
     * @var AbstractServer|Server
     */
    protected $server;

    /**
     * @var Container
     */
    protected $eventApp;

    public function setUp()
    {
        // TODO: Change the autogenerated stub
        parent::setUp();
        $this->server = new Server(
            static::$app->make('config')->get('swoole'),
            static::$app->make('server.laravel')
        );
    }

    public function testRequestEvent()
    {
        $container = $this->server->getLaravel()->getBaseContainer();
        $container->make('events')->listen('request',function($server,$app){
            $this->eventApp = $app;
        });

        $swooleRequest = \Mockery::mock(Request::class);
        $swooleResponse = \Mockery::mock(Response::class);//new Response();

        $swooleRequest->server = [
            'request_method' => 'OPTIONS'
        ];

        $swooleRequest->shouldReceive('rawContent')->andReturn('123');

//        $view = \Mockery::mock('view');

        $event = new RequestEvent($this->server,$swooleRequest,$swooleResponse);


//        $container = $event->getServer()->getLaravel()->getBaseContainer();
//        $container->instance('view',$view);

        $app1 = $event->getServer()->getApplication();

        try {
            $event->handle();
        } catch (\Throwable $e) {
            //dd($e);
        }

//        $this->assertEquals(spl_object_hash($app1),spl_object_hash($this->eventApp));


        $app2 = $event->getServer()->getApplication();
        $this->assertNotEquals(spl_object_hash($app1),spl_object_hash($app2));

    }
}