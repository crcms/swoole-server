<?php

namespace CrCms\Server\Server\Events;

use CrCms\Server\Server\AbstractServer;
use CrCms\Server\Server\Contracts\EventContract;
use CrCms\Server\Server\Contracts\TaskContract;
use Exception;

/**
 * Class TaskEvent
 * @package CrCms\Server\Server\Events
 */
class TaskEvent extends AbstractEvent implements EventContract
{
    /**
     * @var int
     */
    protected $taskId;

    /**
     * @var int
     */
    protected $workId;

    /**
     * @var mixed
     */
    protected $data;

    /**
     * TaskEvent constructor.
     * @param int $taskId
     * @param int $workerId
     * @param mixed $data
     */
    public function __construct(int $taskId, int $workerId, $data)
    {
        $this->taskId = $taskId;
        $this->workId = $workerId;
        $this->data = $data;
    }

    /**
     * @param AbstractServer $server
     * @throws Exception
     */
    public function handle(AbstractServer $server): void
    {
        parent::handle($server); // TODO: Change the autogenerated stub

        /* @var TaskContract $object */
        $object = $this->data['object'];
        /* @var array $params */
        $params = $this->data['params'];

        try {
            $result = $object->handle($server, ...$params);
        } catch (Exception $exception) {
            if (method_exists($object, 'failed')) {
                $object->failed($exception);
            }

            throw $exception;
        }

        $this->server->finish($result);
    }
}